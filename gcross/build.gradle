plugins {
    id 'com.android.library'
    id 'maven-publish'
}


android {
    viewBinding {
        enabled true
    }
    compileSdk 32

    defaultConfig {
        minSdk 23
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
//生成文档注释
task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}
//将文档打包成jar
task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}
//将源码打包，这一点对kotlin来说很重要，否则业务侧无法看到源码
task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}


afterEvaluate {
    publishing {
        publications {

            def versionName = "1.0.0" // 当前版本依赖库版本号，这个jitpack不会使用到，只是我们开发者自己查看
            def aarName = "release"
            release(MavenPublication) {

                // You can then customize attributes of the publication as shown below.
                groupId = 'com.croos.gcross' // 这个是依赖库的组 id
                artifactId = 'gcross' // 依赖库的名称（jitpack 都不会使用到）
                version = versionName
                //aar 文件
                def projectName = project.getName()
                //artifact "build/outputs/aar/${projectName}-release.aar"
                artifact(androidSourcesJar)//将源码打包进aar，如果不需要可以去掉
                artifact(androidJavadocsJar)//将注释打包进aar，如果不需要可以去掉
                artifact "build/outputs/aar/${projectName}-${aarName}.aar"

                //带上依赖 ，否则会报错
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each { dependency ->
                        if (!"unspecified".equals(dependenciesNode.name)) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dependency.group)
                            dependencyNode.appendNode('artifactId', dependency.name)
                            dependencyNode.appendNode('version', dependency.version)
                        }
                    }
                }
            }
        }
    }


}
dependencies {

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    //轮播图
    implementation 'io.github.youth5201314:banner:2.2.2'
    //使用Glide加载图片
    api 'com.github.bumptech.glide:glide:4.13.0'

    //OkGo 是对okHttp的封装
//    implementation 'com.lzy.net:okgo:3.0.4'
    //OkGo上传下载扩展库
    implementation 'com.lzy.net:okserver:2.0.5'
    //fastJson解析json
//    implementation 'com.alibaba:fastjson:1.2.48'
    implementation 'com.tencent:mmkv-static:1.2.14'
    implementation 'com.google.code.gson:gson:2.9.1'
//    implementation 'com.android.support:multidex:1.0.3'
//    implementation 'com.zhy:okhttputils:2.6.2'
    //eventbus事件总线
    implementation 'org.greenrobot:eventbus:3.2.0'
}